openapi: 3.0.3
info:
  title: iWheb Authentication Service
  description: |
    Secure PHP-based authentication with Webling integration, session management, and API-key authorization.
    
    Features:
    - Webling API authentication
    - Email code delivery via SMTP
    - 6-digit code sessions (30min default)
    - API key permissions
    - Session isolation per key
    - Delegated cross-app sessions
    - XChaCha20-Poly1305 encryption
  version: 1.0.0
  contact:
    name: Digital Bastelbude
    url: https://github.com/Digital-Bastelbude/iwheb-auth

servers:
  - url: https://api.example.com
    description: Production server
  - url: http://localhost:8080
    description: Development server

security:
  - ApiKeyAuth: []

tags:
  - name: Authentication
    description: Login, validation, and logout operations
  - name: Session
    description: Session management (check, touch, delegate)
  - name: User
    description: User information and token retrieval

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: Initiate login by email
      description: |
        Creates a session and sends a 6-digit authentication code via email.
        The code is valid for 5 minutes by default.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: byte
                  description: Base64-encoded email address (URL-safe)
                  example: dXNlckBleGFtcGxlLmNvbQ==
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/StorageError'

  /validate/{session_id}:
    post:
      tags:
        - Authentication
      summary: Validate authentication code
      description: |
        Validates the 6-digit code for a session. On success, the session is marked
        as validated and a new session ID is returned.
      operationId: validate
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  pattern: '^\d{6}$'
                  description: 6-digit authentication code
                  example: "123456"
      responses:
        '200':
          description: Code validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/StorageError'

  /session/check/{session_id}:
    get:
      tags:
        - Session
      summary: Check session status
      description: |
        Checks if a session is active and validated.
        Returns session expiry time if active.
      operationId: checkSession
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session is active
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCheckResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /session/touch/{session_id}:
    post:
      tags:
        - Session
      summary: Refresh session
      description: |
        Extends session expiry time and generates a new session ID.
        Returns the new session ID and expiration time.
      operationId: touchSession
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TouchSessionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/StorageError'

  /session/delegate/{session_id}:
    post:
      tags:
        - Session
      summary: Create delegated session
      description: |
        Creates a pre-validated session for another API key. The delegated session
        is bound to the parent session's lifecycle. Requires `delegate_session` permission.
      operationId: createDelegatedSession
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - target_api_key
              properties:
                target_api_key:
                  type: string
                  description: API key for the delegated session
                  example: app-key-2
      responses:
        '200':
          description: Delegated session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelegatedSessionResponse'
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/StorageError'

  /session/logout/{session_id}:
    post:
      tags:
        - Authentication
      summary: Logout and delete session
      description: |
        Deletes a session and all its delegated child sessions.
        This effectively logs out the user.
      operationId: logout
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/{session_id}/info:
    post:
      tags:
        - User
      summary: Get user information
      description: |
        Retrieves user information from Webling for the authenticated user.
        Requires `user_info` permission.
      operationId: getUserInfo
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/{session_id}/token:
    post:
      tags:
        - User
      summary: Get user token
      description: |
        Retrieves the encrypted user token for the authenticated user.
        Requires `user_token` permission.
      operationId: getUserToken
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: User token retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key for authentication. Can also be provided via `Authorization: ApiKey <key>` header.

  parameters:
    SessionId:
      name: session_id
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]+$'
      description: Session identifier
      example: abc123def456

  schemas:
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            session_id:
              type: string
              description: Session identifier
              example: abc123def456
            code_expires_at:
              type: string
              format: date-time
              description: ISO 8601 timestamp when code expires
              example: "2025-10-31T12:35:00Z"
            session_expires_at:
              type: string
              format: date-time
              description: ISO 8601 timestamp when session expires
              example: "2025-10-31T13:00:00Z"

    ValidateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            session_id:
              type: string
              description: New session identifier (rotated)
              example: def456ghi789
            validated:
              type: boolean
              example: true
            session_expires_at:
              type: string
              format: date-time
              example: "2025-10-31T13:00:00Z"

    SessionCheckResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            session_id:
              type: string
              example: abc123def456
            expires_at:
              type: string
              format: date-time
              example: "2025-10-31T13:00:00Z"
            active:
              type: boolean
              example: true

    TouchSessionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            session_id:
              type: string
              description: New session identifier (rotated)
              example: ghi789jkl012
            expires_at:
              type: string
              format: date-time
              example: "2025-10-31T13:30:00Z"

    DelegatedSessionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            session_id:
              type: string
              description: New delegated session identifier
              example: xyz789abc012
            expires_at:
              type: string
              format: date-time
              example: "2025-10-31T13:00:00Z"
            validated:
              type: boolean
              example: true
              description: Delegated sessions are pre-validated
            parent_session_id:
              type: string
              example: abc123def456
            api_key:
              type: string
              example: app-key-2

    UserInfoResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: User information from Webling
          additionalProperties: true
          example:
            id: 123
            firstName: John
            lastName: Doe
            email: john.doe@example.com

    UserTokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            token:
              type: string
              description: Encrypted user token
              example: dGVzdF90b2tlbl8xMjM0NTY=

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            message:
              type: string
              example: Session deleted successfully

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error code
          example: INVALID_INPUT
        message:
          type: string
          description: Human-readable error message
          example: Email required

  responses:
    InvalidInput:
      description: Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: INVALID_INPUT
            message: Invalid input parameters

    Unauthorized:
      description: Unauthorized - Missing or invalid API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: UNAUTHORIZED
            message: Invalid or missing API key

    Forbidden:
      description: Forbidden - API key lacks required permission
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: FORBIDDEN
            message: Permission denied

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: NOT_FOUND
            message: Session not found or expired

    StorageError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: STORAGE_ERROR
            message: Database operation failed
